{"meta":{"title":"darkmfj","subtitle":"learning is good!","description":null,"author":"darkmfj","url":"https://darkmfj.github.io"},"pages":[{"title":"About me","date":"2017-05-13T02:10:30.000Z","updated":"2017-05-31T16:03:31.000Z","comments":false,"path":"about/index.html","permalink":"https://darkmfj.github.io/about/index.html","excerpt":"","text":"Employment history2012 - PresentFormosa Tech. — .Net Software Engineer 2010 - 2012Tornado Tech. — .Net Software Engineer EducationFU JEN CATHOLIC UNIVERSITY (Sep 2004 - Jun 2008) Department of Information Management Skill Set OS Windows, Mac , Archlinux Programming Language C# , Java Framework NET Framework/ASP.NET MVC/WPFEntity FrameworkWindows MobileAndroid Database MS SQLServerOracleSQLite IDE Visual StudioAndroid StudioVS CodeVIM Source control Tools Git Languages Chinese: Mother tongue English: Good working knowledge Hobbies Traveling Reading"}],"posts":[{"title":"Web Deploy 快速發佈站台到 IIS上","slug":"webdeploy-to-iis","date":"2018-04-26T14:41:30.000Z","updated":"2018-04-26T14:41:30.842Z","comments":true,"path":"2018/04/26/webdeploy-to-iis/","link":"","permalink":"https://darkmfj.github.io/2018/04/26/webdeploy-to-iis/","excerpt":"","text":"使用 visual studio 部屬 net 專案時候, 以往作法可能使用 [File System] 的方式: 先 publish 到 本地端 , 把檔案複製到遠端伺服器的站台目錄中… 如果程式調整頻繁,每一次更版動作就需要經過 publish =&gt; 複製 =&gt; 遠端進主機 =&gt; 貼到\\取代 站台檔案 ; 這一串動作，可能會花費不少時間在部屬上。 下面介紹如何使用 [Web Deploy] , 應可以比上述的方式省去不少時間,在替換檔案前,也可以先瀏覽要替代檔案的差異,避免上錯版…問題 1. IIS伺服器主機設置 1.1. 安裝 管理服務 1.2. 設定 管理服務 1.3. Web Deploy 3.X 1.4. 將 port 設定允許 1.5. 設一組可以遠端部屬的帳號(建議) 2. 遠端發佈 2.1. 設定 Publish 2.2. 一鍵發佈 1. IIS伺服器主機設置(只有第一次才需要進行安裝的步驟) 確認 msdepsvc 與 wmsvc service 服務有安裝 Web Management Service (安裝完 管理服務就會有)Web Deployment Agent Service (裝完Web Deploy 3.0就會有) 1.1. 安裝 管理服務新增角色及功能精靈\\勾選 網頁伺服器\\管理工具\\管理服務 1.2. 設定 管理服務啟用遠端連線，識別認證可以勾選 IIS 管理員認證那一項次 1.3. Web Deploy 3.X到官網下載 Web Deploy Toolhttps://www.iis.net/downloads/microsoft/web-deploy 請選完整,直接下一步安裝到底(裝完後 IIS 會有一個 管理服務委派 模組) 1.4. 將 port 設定允許msdepsvc 80wmsvc 8172 1.5. 設一組可以遠端部屬的帳號(建議)電腦管理\\本機使用者和群組 新增一個帳戶 (這邊建立一個 deploy帳號 為例子)PS. 若使用建立帳號 , 記得到遠端主機存放位置 設定存取權限 http://www.iis.net/learn/publish/troubleshooting-web-deploy/web-deploy-error-codes 2. 遠端發佈2.1. 設定 Publish回到 visual studio (下圖以vs2013為例), 新增 Publish 設定 Site Name: 輸入在遠端主機的站台位置 User name\\Password: 輸入有權限能寫入遠端主機的帳號 最後按下 [Validate Connetion] 驗證連線是否成功(如失敗,可以查看相關錯誤訊息,可以對照此 http://www.iis.net/learn/publish/troubleshooting-web-deploy/web-deploy-error-codes 查看資料排除) 2.2. 一鍵發佈上述設定完成後,在左方會有 Preview 透過這個介面,可以檢視 伺服器主機下的檔案 跟 我們這次新部屬的檔案 有哪邊不同,甚至可以只勾選 想要丟上去的的檔案進行發佈(建議不要直接衝動 按下publish 按鈕，比對一下會更新那些檔案比較保險！) 確認無誤後,就可以直接點下 publish 進行發佈。 之後每當我們程式需要發佈到主機上,進行下面的步驟就可以了 build -&gt; 打開 publish -&gt; preview 檔案異動 -&gt; publish 以上。","categories":[],"tags":[{"name":"iis","slug":"iis","permalink":"https://darkmfj.github.io/tags/iis/"}]},{"title":"login archlinux by ssh","slug":"arch-login-by-ssh","date":"2017-05-31T16:26:21.000Z","updated":"2017-05-31T16:26:21.000Z","comments":true,"path":"2017/06/01/arch-login-by-ssh/","link":"","permalink":"https://darkmfj.github.io/2017/06/01/arch-login-by-ssh/","excerpt":"","text":"個人的使用情境需求大概如下：想要用mac透過ssh連線遠端我家中設置的一台 arch linux server PS:一般外面的雲端服務,如果有支援ssh登入,前端設置方式應該都差不多。 Server 端 (Archlinux 為例)1.安裝ssh在 arch terminal 環境下從官方庫安裝 openssh 1$ sudo pacman -S openssh 2.啟動 sshd - OpenSSH SSH daemon每次跑的時候12# 應該會要權限$ systemctl start sshd 弄成服務的方式,開機自動跑起來12# 應該會要權限$ systemctl enable sshd.service Client 端 (mac 為例)上述主機設置完成後，(如果沒有防火牆…阻擋的話) 應該可以很順利透過命令 ssh 連線到主機裡面。1$ ssh -p 22 darkmfj@192.168.1.1 如果想要不用每次登入都要輸入密碼的話,可以採用 匯入金鑰的方式 進行認證如下: 先看你的mac是不是已經有 公開的金鑰(一般會在 ~/.ssh 有檔案) 1$ ssh-copy-id darkmfj@192.168.1.1 第一次匯入到主機時,會問你帳號的密碼 成功登入後,之後就可以直接透過 1$ ssh darkmfj@192.168.1.1 另外可以發現在執行上面的 ssh-copy-id 後, 於 Archlinux 主機裡面, 會有 1234567$ ls ~/.ssh# 應該會出現下面authorized_keys$ cat ~/.ssh/authorized_keys# 會出現如下內容 剛認證放到主機的keyssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDY6V+QoxNoYHlixxxxxxx darkmfj@darkmfjMacBook-Pro.local ref: https://wiki.archlinux.org/index.php/Secure_Shell https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key","categories":[],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://darkmfj.github.io/tags/ssh/"},{"name":"arch","slug":"arch","permalink":"https://darkmfj.github.io/tags/arch/"},{"name":"linux","slug":"linux","permalink":"https://darkmfj.github.io/tags/linux/"}]},{"title":"golang install for mac","slug":"golang-install-mac","date":"2017-04-22T13:43:59.000Z","updated":"2017-04-22T13:43:59.000Z","comments":true,"path":"2017/04/22/golang-install-mac/","link":"","permalink":"https://darkmfj.github.io/2017/04/22/golang-install-mac/","excerpt":"","text":"安裝 golang 在mac 上 官網安裝步驟 1.下載安裝包安裝來源 golang 1.8.1mac 可直接下載 pkg,透過介面安裝 2. $GOPATH$GOPATH 可以設置你的worksapce 存放位置。 3.設定 Golang 環境變數 for zsh.zshrc1234567891011# 在 zshrc 設定檔後面增加如下面的設置 , 這樣使用 zsh shell 時,設定才吃的進去。 # 將 golang workspace 設定在 $HOME/go ,可改成你喜歡的。export GOPATH=$HOME/goexport GOROOT=/usr/local/go/bin# 當安裝其他套件時,才能直接下 命令執行export PATH=$PATH:$GOPATH/bin# 因有一些 預設package是放在一開始安裝的位置 /usr/local/go/bin# EX: go,godoc,gofmt...等export PATH=$PATH:$GOROOT/bin ps. go的預設安裝位置可能會因為安裝的方式不同,路徑也有可能不同,建議可以裝完後透過 where go 查看實際路徑 4. go env透過 go env 的命令 可以查看目前 go 相關設置的環境變數123456789101112131415shell&gt; go env## resultGOARCH=\"amd64\"GOBIN=\"/Users/&#123;user&#125;/go/bin\"GOEXE=\"\"GOHOSTARCH=\"amd64\"GOHOSTOS=\"darwin\"GOOS=\"darwin\"GOPATH=\"/Users/&#123;user&#125;/go\"GORACE=\"\"GOROOT=\"/usr/local/go\"GOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"GCCGO=\"gccgo\"...","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"https://darkmfj.github.io/tags/golang/"}]},{"title":"andorid studio shortcut - must know","slug":"andorid-studio-shortcut","date":"2017-04-12T13:41:49.000Z","updated":"2017-04-12T13:48:11.000Z","comments":true,"path":"2017/04/12/andorid-studio-shortcut/","link":"","permalink":"https://darkmfj.github.io/2017/04/12/andorid-studio-shortcut/","excerpt":"","text":"Star Name Shortcut Comment ★★★★ Parameter info (within method call arguments) Ctrl+P","categories":[],"tags":[{"name":"android","slug":"android","permalink":"https://darkmfj.github.io/tags/android/"},{"name":"shortcut","slug":"shortcut","permalink":"https://darkmfj.github.io/tags/shortcut/"}]}]}